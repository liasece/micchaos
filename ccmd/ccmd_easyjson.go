// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package ccmd

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonAf973d35DecodeCcmdSC(in *jlexer.Lexer, out *SC_TopLayer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "MsgName":
			out.MsgName = string(in.String())
		case "Data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				out.Data = in.Bytes()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAf973d35EncodeCcmdSC(out *jwriter.Writer, in SC_TopLayer) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"MsgName\":"
		out.RawString(prefix[1:])
		out.String(string(in.MsgName))
	}
	{
		const prefix string = ",\"Data\":"
		out.RawString(prefix)
		out.Base64Bytes(in.Data)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SC_TopLayer) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonAf973d35EncodeCcmdSC(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SC_TopLayer) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonAf973d35EncodeCcmdSC(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SC_TopLayer) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonAf973d35DecodeCcmdSC(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SC_TopLayer) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonAf973d35DecodeCcmdSC(l, v)
}
func easyjsonAf973d35DecodeCcmdSC1(in *jlexer.Lexer, out *SC_ResEnterGame) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAf973d35EncodeCcmdSC1(out *jwriter.Writer, in SC_ResEnterGame) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SC_ResEnterGame) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonAf973d35EncodeCcmdSC1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SC_ResEnterGame) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonAf973d35EncodeCcmdSC1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SC_ResEnterGame) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonAf973d35DecodeCcmdSC1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SC_ResEnterGame) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonAf973d35DecodeCcmdSC1(l, v)
}
func easyjsonAf973d35DecodeCcmdSC2(in *jlexer.Lexer, out *SC_ResAccountRigster) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Code":
			out.Code = int32(in.Int32())
		case "Message":
			out.Message = string(in.String())
		case "ConnectID":
			out.ConnectID = string(in.String())
		case "Account":
			if in.IsNull() {
				in.Skip()
				out.Account = nil
			} else {
				if out.Account == nil {
					out.Account = new(AccountInfo)
				}
				(*out.Account).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAf973d35EncodeCcmdSC2(out *jwriter.Writer, in SC_ResAccountRigster) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Code\":"
		out.RawString(prefix[1:])
		out.Int32(int32(in.Code))
	}
	{
		const prefix string = ",\"Message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	{
		const prefix string = ",\"ConnectID\":"
		out.RawString(prefix)
		out.String(string(in.ConnectID))
	}
	{
		const prefix string = ",\"Account\":"
		out.RawString(prefix)
		if in.Account == nil {
			out.RawString("null")
		} else {
			(*in.Account).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SC_ResAccountRigster) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonAf973d35EncodeCcmdSC2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SC_ResAccountRigster) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonAf973d35EncodeCcmdSC2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SC_ResAccountRigster) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonAf973d35DecodeCcmdSC2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SC_ResAccountRigster) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonAf973d35DecodeCcmdSC2(l, v)
}
func easyjsonAf973d35DecodeCcmdSC3(in *jlexer.Lexer, out *SC_ResAccountLogin) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Code":
			out.Code = int32(in.Int32())
		case "Message":
			out.Message = string(in.String())
		case "ConnectID":
			out.ConnectID = string(in.String())
		case "Account":
			if in.IsNull() {
				in.Skip()
				out.Account = nil
			} else {
				if out.Account == nil {
					out.Account = new(AccountInfo)
				}
				(*out.Account).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAf973d35EncodeCcmdSC3(out *jwriter.Writer, in SC_ResAccountLogin) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Code\":"
		out.RawString(prefix[1:])
		out.Int32(int32(in.Code))
	}
	{
		const prefix string = ",\"Message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	{
		const prefix string = ",\"ConnectID\":"
		out.RawString(prefix)
		out.String(string(in.ConnectID))
	}
	{
		const prefix string = ",\"Account\":"
		out.RawString(prefix)
		if in.Account == nil {
			out.RawString("null")
		} else {
			(*in.Account).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SC_ResAccountLogin) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonAf973d35EncodeCcmdSC3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SC_ResAccountLogin) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonAf973d35EncodeCcmdSC3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SC_ResAccountLogin) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonAf973d35DecodeCcmdSC3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SC_ResAccountLogin) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonAf973d35DecodeCcmdSC3(l, v)
}
func easyjsonAf973d35DecodeCcmdCS(in *jlexer.Lexer, out *CS_TopLayer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "MsgName":
			out.MsgName = string(in.String())
		case "Data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				out.Data = in.Bytes()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAf973d35EncodeCcmdCS(out *jwriter.Writer, in CS_TopLayer) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"MsgName\":"
		out.RawString(prefix[1:])
		out.String(string(in.MsgName))
	}
	{
		const prefix string = ",\"Data\":"
		out.RawString(prefix)
		out.Base64Bytes(in.Data)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CS_TopLayer) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonAf973d35EncodeCcmdCS(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CS_TopLayer) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonAf973d35EncodeCcmdCS(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CS_TopLayer) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonAf973d35DecodeCcmdCS(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CS_TopLayer) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonAf973d35DecodeCcmdCS(l, v)
}
func easyjsonAf973d35DecodeCcmdCS1(in *jlexer.Lexer, out *CS_EnterGame) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAf973d35EncodeCcmdCS1(out *jwriter.Writer, in CS_EnterGame) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CS_EnterGame) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonAf973d35EncodeCcmdCS1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CS_EnterGame) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonAf973d35EncodeCcmdCS1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CS_EnterGame) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonAf973d35DecodeCcmdCS1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CS_EnterGame) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonAf973d35DecodeCcmdCS1(l, v)
}
func easyjsonAf973d35DecodeCcmdCS2(in *jlexer.Lexer, out *CS_AccountRegister) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "LoginName":
			out.LoginName = string(in.String())
		case "PassWordMD5":
			out.PassWordMD5 = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAf973d35EncodeCcmdCS2(out *jwriter.Writer, in CS_AccountRegister) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"LoginName\":"
		out.RawString(prefix[1:])
		out.String(string(in.LoginName))
	}
	{
		const prefix string = ",\"PassWordMD5\":"
		out.RawString(prefix)
		out.String(string(in.PassWordMD5))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CS_AccountRegister) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonAf973d35EncodeCcmdCS2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CS_AccountRegister) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonAf973d35EncodeCcmdCS2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CS_AccountRegister) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonAf973d35DecodeCcmdCS2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CS_AccountRegister) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonAf973d35DecodeCcmdCS2(l, v)
}
func easyjsonAf973d35DecodeCcmdCS3(in *jlexer.Lexer, out *CS_AccountLogin) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "LoginName":
			out.LoginName = string(in.String())
		case "PassWordMD5":
			out.PassWordMD5 = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAf973d35EncodeCcmdCS3(out *jwriter.Writer, in CS_AccountLogin) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"LoginName\":"
		out.RawString(prefix[1:])
		out.String(string(in.LoginName))
	}
	{
		const prefix string = ",\"PassWordMD5\":"
		out.RawString(prefix)
		out.String(string(in.PassWordMD5))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CS_AccountLogin) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonAf973d35EncodeCcmdCS3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CS_AccountLogin) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonAf973d35EncodeCcmdCS3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CS_AccountLogin) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonAf973d35DecodeCcmdCS3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CS_AccountLogin) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonAf973d35DecodeCcmdCS3(l, v)
}
func easyjsonAf973d35DecodeCcmd(in *jlexer.Lexer, out *AccountInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "UUID":
			out.UUID = string(in.String())
		case "LoginName":
			out.LoginName = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAf973d35EncodeCcmd(out *jwriter.Writer, in AccountInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"UUID\":"
		out.RawString(prefix[1:])
		out.String(string(in.UUID))
	}
	{
		const prefix string = ",\"LoginName\":"
		out.RawString(prefix)
		out.String(string(in.LoginName))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AccountInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonAf973d35EncodeCcmd(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AccountInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonAf973d35EncodeCcmd(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AccountInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonAf973d35DecodeCcmd(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AccountInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonAf973d35DecodeCcmd(l, v)
}
